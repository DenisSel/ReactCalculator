{"version":3,"sources":["components/Result.jsx","components/Buttons.jsx","serviceWorker.js","index.js","App.jsx"],"names":["ResultBlock","styled","div","Paragraph","p","Result","props","result","ButtonsBlock","ButtonBlock","Buttons","onClick","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","CalculatorBlock","useState","setResult","isResult","setIsResult","reset","backspace","slice","calculate","calcResult","eval","calculateResult","val","length"],"mappings":"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","file":"static/js/main.c4dae5de.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResultBlock = styled.div`\r\n  height: 60px;\r\n  background-color: #000000;\r\n  width: 100%;\r\n  border: 1px solid #08f50a;\r\n`;\r\nconst Paragraph = styled.p`\r\n  font-size: 40px;\r\n  margin: 5px;\r\n  color: #08f50a;\r\n`;\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <ResultBlock>\r\n      <Paragraph>{props.result}</Paragraph>\r\n    </ResultBlock>\r\n  );\r\n}\r\n\r\n\r\nexport default Result;\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ButtonsBlock = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  border: 1px solid #08f50a;\r\n`;\r\nconst ButtonBlock = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 25%;\r\n  box-sizing: border-box;\r\n  height: 60px;\r\n  font-size: 30px;\r\n  color: #08f50a;\r\n  border: 1px solid #08f50a;\r\n  background-color: #000000;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    color: #000000;\r\n  background-color: #08f50a;\r\n  }\r\n`;\r\n\r\nfunction Buttons(props) {\r\n    return (\r\n      <ButtonsBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"1\")}>1</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"2\")}>2</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"3\")}>3</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"+\")}>+</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"4\")}>4</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"5\")}>5</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"6\")}>6</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"-\")}>-</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"7\")}>7</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"8\")}>8</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"9\")}>9</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"*\")}>&#8226;</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\".\")}>.</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"0\")}>0</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"=\")}>=</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"/\")}>รท</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"(\")}>(</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"CE\")}>CE</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\")\")}>)</ButtonBlock>\r\n        <ButtonBlock onClick={() => props.onClick(\"C\")}>C</ButtonBlock>\r\n      </ButtonsBlock>\r\n    );\r\n}\r\n\r\n\r\nexport default Buttons;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport Result from './components/Result';\r\nimport Buttons from './components/Buttons';\r\n\r\nconst CalculatorBlock = styled.div`\r\n  max-width: 400px;\r\n  margin: 30px auto;\r\n`;\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState('');\r\n  const [isResult, setIsResult] = useState(false);\r\n\r\n  function reset() {\r\n    setResult('');\r\n  }\r\n\r\n  function backspace() {\r\n    setResult(result.slice(0, -1));\r\n  }\r\n\r\n  function calculate() {\r\n    // eslint-disable-next-line\r\n    let calcResult = eval(result);\r\n    setResult(calcResult);\r\n    setIsResult(true);\r\n  }\r\n\r\n  function calculateResult(val) {\r\n    if (isResult) {\r\n      setIsResult(false);\r\n      reset();\r\n      setResult(val);\r\n    } else if (val === \"C\" || isResult) {\r\n      setIsResult(false);\r\n      reset();\r\n    } else if (result.length > 15) {\r\n      setResult(\"Error: many symbols\");\r\n    } else if (val === \"=\") {\r\n      calculate();\r\n      setIsResult(true)\r\n    } else if (val === \"CE\") {\r\n      backspace()\r\n    } else {\r\n      setResult(result + val);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CalculatorBlock>\r\n        <Result result={result}/>\r\n        <Buttons onClick={calculateResult}/>\r\n      </CalculatorBlock>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"sourceRoot":""}